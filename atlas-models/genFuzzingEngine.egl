[% out.setContentType("Java"); %]
[* Need parameters in the run configuration: 
simName to specify the simulator name
fuzzFileName gives the fuzzing definition file *]
package fuzzingengine.spec;

import java.util.Optional;
import atlasdsl.Mission;

import fuzzingengine.*;
public class GeneratedFuzzingSpec {

	public static FuzzingEngine createFuzzingEngine(Mission m) {
	FuzzingEngine fe = new FuzzingEngine(m);
	FuzzingSimMapping simMapping = new FuzzingSimMapping();
	
[% for (s in FuzzSpec!Simulator.allInstances()) { %]
	[% if (s.name == simName) { %]
	[% var baseDir = s.baseDirectory; %]
		[% for (comp in s.components) { %]
		[% var cnature = "FuzzingSimMapping.FuzzingNature.NO_MODIFICATIONS";
		   var classstring = "Optional.empty()";
	   	   var crelpathstr = "Optional.empty()"; %]
		[% 	if (comp.nature.isKindOf(BinaryFuzzing)) {
				cnature = "FuzzingSimMapping.FuzzingNature.BINARY";
				classstring = "Optional.empty()";
				crelpathstr = "Optional.of(\"" + baseDir + "/" + comp.componentRelativePath + "\")";
			} %]
		
	simMapping.setComponentFuzzingInfo("[%= comp.name %]", [%= cnature %], [%= classstring %], [%= crelpathstr %]);
		
			[% for (vspec in comp.vars) { %]
				[% 
				var c = comp;
				var vt = vspec.vtype; var typename = "Optional.empty()";
				if (vt.isKindOf(RegexpVariableType)) {
					typename = "Optional.of()";
				}
				
				if (vt.isKindOf(ROSVariableType)) {
					typename = "Optional.of(\"" + vt.ROSTypename + "\")";
				}
			%]
				
	simMapping.addRecord("[%= c.name %]", "[%= vspec.variable %]", "[%= vspec.reflectionName %]", 
	FuzzingSimMapping.VariableDirection.[%= vspec.dir %], Optional.of("[%= baseDir %]/[%= c.componentRelativePath %]"), [%= typename %],
	[%= vspec.vehicleSpecific %]);
		[% } %]
		[% } %]
	[% } %]
	[% } %]
	
	[* Add simulator message variables *]
	[% for (msg in FuzzSpec!FuzzingMessage.allInstances()) { %]
		[% var mref = msg.messageRef;
		   var mname = mref.name; %]	
		[% for (vspec in msg.vars) { %]
			[% var c = vspec.component; 
			   var cname;
			   var crelpathstr;
			   var primedName;
			   var origName = vspec.variable;
			%]
			[% if (c.isDefined()) {
				cname = c.name;
				crelpathstr = "Optional.of(" + c.componentRelativePath + ")";
			} else {
				cname = "NULL-" + mname;
				crelpathstr = "Optional.empty()";
			}
			 %]
			 
            [* We assume that the primed name is automatically computed by adding the 
            character to the end, ignoring reflectionName, e.g. X -> X'. This is because later in 
            FuzzingEngine.addFuzzingMessageOperation we assume X' is the name of the given simmapping key *]
		 	[% primedName = origName + "'";
			   var vt = vspec.vtype; %]
	
	[* The primed name is FIRST, since it is received by pShare at the recipient as the altered name *]
	simMapping.addRecord("[%= cname %]", "[%= primedName %]", "[%= origName %]", 
	FuzzingSimMapping.VariableDirection.[%= vspec.dir %], [%= crelpathstr %],
	[% if (vt.isKindOf(RegexpVariableType)) { %]
		Optional.of("[%= vt.regexp %]")
	[% } else { %]
		Optional.empty()
	[% } %]
	);

	
		[% } %]
	[% } %]
	
	fe.setSimMapping(simMapping);
	fe.setupFromFuzzingFile("[%= fuzzFileName %]", m);
	return fe;
	}
}